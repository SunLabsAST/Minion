All indexing and retrieval in Minion is organized around fields. The basic model is that documents are composed of a number of field/value pairs. We do not, however, proscribe the set of fields that a document should have, rather it is up to the application using the search engine to define the set of fields that will be used and how those fields are to be treated at indexing and querying time.

Although fields can be defined at any time during the indexing  process and the engine will apply default processing to unknown  fields, it is good practice to define the set of fields that an  application will be using before indexing begins.  This will allow the application to catch configuration problems before too much indexing is done.

The same field (that is, a field with the same name, attributes and type) can be defined multiple times.  So, for example, an application that is doing indexing can safely define the fields on every invocation, rather than doing it only when the index is initially created.  An exception will be thrown if the application attempts to redefine the attributes or type for a field.

==Naming Fields==

A field name can be any non-<code>null</code>, non-empty Java string. Field names are treated case insensitively, so <code>title</code>, <code>Title</code>, and <code>TITLE</code> are all considered to be the same field name by the engine. The engine will ensure that no matter what case the field names are provided in at indexing or querying time, they will be treated in a case insensitive fashion.

==Field Attributes==

When you define a field, you can specify the attributes for that field. These attributes tell the engine how to treat the values that you will be adding to the field. The attributes that are available for a field are defined in the [javadoc/com/sun/kt/search/FieldInfo#Attribute <code>Attribute</code> enumeration of the <code>com.sun.labs.minion.FieldInfo</code> class]. Any combination of these attributes is valid, but there are some combinations that do not make much sense. Such combinations are noted as appropriate below.

===<code>SAVED</code>===

This attribute indicates that the field value should be saved in the index <em>exactly</em> as it appears in the document.  An application can save multiple values for the same field in the same document.   

There are three instances in which a field should specify the saved attribute.  The first is when the application will need to retrieve the field value for display to the user. For example, an application would save the value of the <code>title</code> field so that the application can display the titles of the documents retrieved in response to a query. 

The second instance when a field should be saved is when the application will need to run parametric queries against the saved field values.  For example, if the application needs to support range queries like:

<blockquote><code>date &lt;= 01/01/2007</code></blockquote>

then the <code>date</code> field needs to be saved.  Saved fields support all of the standard relational operators.

Finally, a field should have the saved attribute if the application will need to sort result sets based on the contents of the field.  For example, one might wish to sort email messages by the date on which they were sent, or by the name of the recipient of the message.

If a field has the <code>SAVED</code> attribute set, then that field also needs a type set.  The types available for saved fields are defined in the <a href="javadoc/com/sun/kt/search/FieldInfo#Type"><code>Type</code> enumeration of the <code>com.sun.labs.minion.FieldInfo</code>
class</a>.

;<code>INTEGER</code> : An integer quantity storeable in a 64 bit integer.  When indexing, the engine will handle conversions between string values and integer values as appropriate. 
;<code>FLOAT</code> : Some quantity storeable in a 64 bit double.  When indexing, the engine will handle conversions between string values an double values as appropriate.
;<code>DATE</code> : A date, represented as as the number of milliseconds since the epoch (00:00:00 GMT, January 1, 1970).  When indexing, the engine will handle instances of <code>java.lang.Long</code> and <code>java.util.Date</code> correctly. Additionally, a large number of text representations of dates (e.g., January 1, 2007) are parsed automatically into <code>java.util.Date</code>. 
;<code>STRING</code> : Any non-<code>null</code> Java string.  In
addition to the standard relational operators, string saved fields
provide starts, ends, substring, wildcard, and similarity operations.

By default, string saved fields are stored so that the relational operators can work in a case insensitive fashion if required.  For example, the query:

        <blockquote><code>title &lt;substring&gt; java</code></blockquote>

Will find documents whose titles contain the substrings <code>java</code>, <code>Java</code>, or <code>JAVA</code>.  This behavior can be modified if required.  See the [#caseInsensitive <code>CASE_INSENSITIVE</code>] attribute
below

===<code>TOKENIZED</code>===

The field value should be tokenized.  If this attribute is set, then the data in the field will be tokenized according to the rules of whatever tokenizer the engine is using.  By default this is the [tokenization.html universal   tokenizer], but the engine can be configured to use a different tokenizer.  Usually, when a field is tokenized, the data in the field will be broken into tokens at spaces and punctuation. 

If the <code>TOKENIZED</code> attribute is specified for a field, it is almost certain that you will want to specify the <code>INDEXED</code> attribute as well.  If you do not specify the <code>INDEXED</code> attribute, then the effort of performing the tokenization is wasted, and the tokens generated by the tokenizer will not be added to the index.  

===<code>INDEXED</code>===

Any terms in the field (whether the field is tokenized or un-tokenized) will have entries added to the main dictionary and postings data added to the postings file for that dictionary.  The <code>INDEXED</code> attribute is used for the data that you want to be searchable using traditional keyword queries.  For example, if you wish to find all of the documents that contain the word <code>java</code> using the keyword query:

  <blockquote><code>java</code></blockquote>

Then you must ensure that the fields that you wish to be able to search have the <code>INDEXED</code> attribute set. Additionally, fields that have this attribute can be specified in queries that use the <code>&lt;contains&gt;</code> operator.  For example, if the <code>title</code> field has the <code>INDEXED</code> attribute, then the query:  

<blockquote>
<code>title &lt;contains&gt; java</code>
<blockquote>

will return only those documents that have the word <code>java</code> in the <code>title</code> field.

If the <code>INDEXED</code> attribute is specified for a field and the <code>TOKENIZED</code> attribute is <em>not</em> specified, then the entire content of the field will be added as a word to the index.  This may be useful if an application expects that there will be "words" that include punctuation.  For example, a part number like <code>123-456-789</code> could be in a field that is indexed, but not tokenized. 

Note, however, that this will create some difficulties at querying time, when the application will have to ensure that values for particular fields (i.e., the fields that specify <code>INDEXED</code> but not <code>TOKENIZED</code>) are not tokenized by the query parser.  For the most part, cases like this are best handled with a saved field of the appropriate type. 
  
===<code>VECTORED</code>===

In addition to keeping track of which document a given word occurs in, the engine will also keep track of which words occur in a given document. The <code>VECTORED</code> attribute for a field indicates that the words that are extracted from the field should be added to the words for this document. 

In the default configuration, the engine will actually keep track of which vectored fields have contributed which words, as well as keeping track of the overall set of words in the document. Specifying this attribute allows applications to perform classification or document similarity computations against just this field. So, for example, you could find the documents that have titles similar to a given document's title.

===<code>TRIMMED</code>===

This attribute indicates that field values passed into the indexer should have any leading or trailing spaces trimmed from the values before they are processed any further.


===<code>CASE_SENSITIVE</code>===

This attribute indicates that a given saved string field should be treated in a case sensitive manner. If a saved string field has the case sensitive attribute set, then relational queries against that field <em>must</em> match the case of the values stored in the field. This attribute has no effect on fields that are not saved or saved fields that are not string fields. 

==Default Fields==

When indexing, text that is not explicitly added to any field is implicitly added to an indexed, tokenized, and vectored field. Such a field can be thought of as the implicit "body" of the document. Typically, operations on fields can operate on this field by passing <code>null</code> as the name of the field upon which operations should be undertaken. There are two drawbacks to this implicit field: the query language does not provide a way to query against just this field and the data that is indexed for this field is not available to the [javadoc/com/sun/kt/search/Document.html document abstraction] that an application can retrieve from the
search engine.

If an application will need to provide querying against just this "body" data, then it should ensure that the data is explicitly indexed into a named field that is indexed, tokenized, and vectored.

If the engine encounters an unknown field name while indexing, then a new field is defined on the fly with that name. By default, fields that are defined in this way will be indexed, tokenized, and vectored.

The treatment of undefined fields can be modified via the configuration file for a search engine. The [javadoc/com/sun/kt/search/SearchEngine.html#setDefaultFieldInfo <code>SearchEngine.setDefaultFieldInfo</code>] method can be used to specify an instance of [javadoc/com/sun/kt/search/FieldInfo.html <code>FieldInfo</code>] whose attributes and type will be used as the default attributes and
type for fields defined in this way.
