/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. /tank/work/Projects/minion/trunk/minion/src/com/sun/labs/minion/retrieval/parser/grammar-web.jj */
/*@egen*//*
 *   Copyright 2007 Sun Microsystems, Inc. All rights reserved
 * 
 *   Use is subject to license terms.
 */

            
options {                                                                                                                         
	STATIC=false;                        
    JAVA_UNICODE_ESCAPE=true;
}
            
PARSER_BEGIN(WebParser)
    package com.sun.labs.minion.retrieval.parser;
    
    public class WebParser extends Parser/*@bgen(jjtree)*/implements WebParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTWebParserState jjtree = new JJTWebParserState();

/*@egen*/

        public static void main(String args[]) throws Exception {
            WebParser p = new WebParser(System.in);
            SimpleNode n = (SimpleNode)p.doParse();
            n.dump(":");
        }
    }

PARSER_END(WebParser)

SKIP: {
   " " | 
   "\u00a0" | 
   "\u1680" | 
   "\u180e" | 
   "\u2000" | 
   "\u2001" | 
   "\u2002" | 
   "\u2003" | 
   "\u2004" | 
   "\u2005" | 
   "\u2006" | 
   "\u2007" | 
   "\u2008" | 
   "\u2009" | 
   "\u200a" | 
   "\u200b" | 
   "\u2028" | 
   "\u2029" | 
   "\u202f" | 
   "\u205f" | 
   "\u3000" |
   "\r" |
   "\t" |
   "\n"
}


SimpleNode doParse(): {/*@bgen(jjtree) doParse */
  WebASTdoParse jjtn000 = new WebASTdoParse(this, JJTDOPARSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) doParse */
    try {
/*@egen*/
    q() <EOF>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            return jjtn000;
        }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void q(): {/*@bgen(jjtree) q */
  WebASTq jjtn000 = new WebASTq(this, JJTQ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) q */
           try {
/*@egen*/
	   (
	   passageTerm()
	   |
	   phraseTerm()
	   |
	   term()
	   )+/*@bgen(jjtree)*/
           } catch (Throwable jjte000) {
             if (jjtc000) {
               jjtree.clearNodeScope(jjtn000);
               jjtc000 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte000 instanceof RuntimeException) {
               throw (RuntimeException)jjte000;
             }
             if (jjte000 instanceof ParseException) {
               throw (ParseException)jjte000;
             }
             throw (Error)jjte000;
           } finally {
             if (jjtc000) {
               jjtree.closeNodeScope(jjtn000, true);
             }
           }
/*@egen*/
}

void term(): {/*@bgen(jjtree) term */
              WebASTterm jjtn000 = new WebASTterm(this, JJTTERM);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t=null,v=null;} {/*@bgen(jjtree) term */
         try {
/*@egen*/
	 t = <TERM>/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/
	 {
	    jjtn000.value = t.image;
	 }
	 |
	 t = <VALIDCHAR>/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/
	 {
	    jjtn000.value = t.image;
	 }/*@bgen(jjtree)*/
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void phraseTerm(): {/*@bgen(jjtree) phraseTerm */
                    WebASTphraseTerm jjtn000 = new WebASTphraseTerm(this, JJTPHRASETERM);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t=null;} {/*@bgen(jjtree) phraseTerm */
         try {
/*@egen*/
	 t = <PHRASE>/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/
	 {
		jjtn000.value = t.image;
	 }/*@bgen(jjtree)*/
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/

}

void passageTerm(): {/*@bgen(jjtree) passageTerm */
                     WebASTpassageTerm jjtn000 = new WebASTpassageTerm(this, JJTPASSAGETERM);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t=null;} {/*@bgen(jjtree) passageTerm */
         try {
/*@egen*/
	 t = <PASSAGE>/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/
	 {
		jjtn000.value = t.image;
	 }/*@bgen(jjtree)*/
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/

}
//SKIP : { " "|"\r"|"\n"|"\t" }

TOKEN : { <PLUS: "+" >}
TOKEN : { <MINUS: "-" >}
TOKEN : { <FSLASH: "/" >}
TOKEN : { <TILDE: "~" >}
TOKEN : { <DUBQUOTE: "\"" >}
TOKEN : { <LB: "[" >}
TOKEN : { <RB: "]" >}
//TOKEN : { <VALIDCHAR: ~["\""," ","\t","\r","\n","[","]"] >}
TOKEN : { <VALIDCHAR: (<SPACESEPCHAR>) >}
TOKEN : { <PHRASE: ((<MINUS>|<PLUS>|<FSLASH>)? (<DUBQUOTE>) (<NGRAMTOKEN>|<VALIDCHAR>|<WHITESPACE>|<PUNCTUATION>)+ (<DUBQUOTE>)) >}
TOKEN : { <PASSAGE: ((<MINUS>|<PLUS>|<FSLASH>)? (<LB>) (<NGRAMTOKEN>|<VALIDCHAR>|<WHITESPACE>|<PUNCTUATION>)+ (<RB>)) >}
TOKEN : { <TERM: ((<MINUS>|<PLUS>|<FSLASH>|<TILDE>)? (<NGRAMTOKEN>|<VALIDCHAR>|<PUNCTUATION>)+) >}


/*
 * The following definitions are used by the definitions above as a guide
 * for what is a word character vs. a space character.
 */ 


/**
 * The following token rules are autogenerated by com.sun.labs.minion.document.tokenizer.JCCRules.
 * DO NOT HAND EDIT THEM!
 */
TOKEN : { < #WHITESPACE : (<WHITECHAR>)+ > }
TOKEN : {
< #WHITECHAR : 
   " " | 
   "\u00a0" | 
   "\u1680" | 
   "\u180e" | 
   "\u2000" | 
   "\u2001" | 
   "\u2002" | 
   "\u2003" | 
   "\u2004" | 
   "\u2005" | 
   "\u2006" | 
   "\u2007" | 
   "\u2008" | 
   "\u2009" | 
   "\u200a" | 
   "\u200b" | 
   "\u2028" | 
   "\u2029" | 
   "\u202f" | 
   "\u205f" | 
   "\u3000" |
   "\t" |
   "\r" |
   "\n"
> }

TOKEN : { < SPACESEPTOKEN : (<SPACESEPCHAR> | <SPACESEPCHAR>)+ > }
TOKEN: { < SPACESEPCHAR :
   (
    <SPACESEPCHAR1> | 
    <SPACESEPCHAR2> | 
    <SPACESEPCHAR3> | 
    <SPACESEPCHAR4> | 
    <SPACESEPCHAR5> | 
    <SPACESEPCHAR6> | 
    <SPACESEPCHAR7> | 
    <SPACESEPCHAR8> | 
    <SPACESEPCHAR9>
   )
> }
TOKEN : {
< #SPACESEPCHAR1 : 
   [
    "0"-"9",
    "A"-"Z",
    "a"-"z",
    "\u00c0"-"\u00d6",
    "\u00d8"-"\u00f6",
    "\u00f8"-"\u0236",
    "\u0250"-"\u02c1",
    "\u02c6"-"\u02d1",
    "\u02e0"-"\u02e4",
    "\u0388"-"\u038a",
    "\u038e"-"\u03a1",
    "\u03a3"-"\u03ce",
    "\u03d0"-"\u03f5",
    "\u03f7"-"\u03fb",
    "\u0400"-"\u0481",
    "\u048a"-"\u04ce",
    "\u04d0"-"\u04f5",
    "\u04f8"-"\u04f9",
    "\u0500"-"\u050f",
    "\u0531"-"\u0556"
   ]
> }
TOKEN : {
< #SPACESEPCHAR2 : 
   [
    "\u0561"-"\u0587",
    "\u05d0"-"\u05ea",
    "\u05f0"-"\u05f2",
    "\u0712"-"\u072f",
    "\u074d"-"\u074f",
    "\u0780"-"\u07a5",
    "\u0904"-"\u0939",
    "\u0958"-"\u0961",
    "\u0966"-"\u096f",
    "\u0985"-"\u098c",
    "\u098f"-"\u0990",
    "\u0993"-"\u09a8",
    "\u09aa"-"\u09b0",
    "\u09b6"-"\u09b9",
    "\u09dc"-"\u09dd",
    "\u09df"-"\u09e1",
    "\u09e6"-"\u09f1",
    "\u0a05"-"\u0a0a",
    "\u0a0f"-"\u0a10",
    "\u0a13"-"\u0a28"
   ]
> }
TOKEN : {
< #SPACESEPCHAR3 : 
   [
    "\u0a2a"-"\u0a30",
    "\u0a32"-"\u0a33",
    "\u0a35"-"\u0a36",
    "\u0a38"-"\u0a39",
    "\u0a59"-"\u0a5c",
    "\u0a66"-"\u0a6f",
    "\u0a72"-"\u0a74",
    "\u0a85"-"\u0a8d",
    "\u0a8f"-"\u0a91",
    "\u0a93"-"\u0aa8",
    "\u0aaa"-"\u0ab0",
    "\u0ab2"-"\u0ab3",
    "\u0ab5"-"\u0ab9",
    "\u0ae0"-"\u0ae1",
    "\u0ae6"-"\u0aef",
    "\u0b05"-"\u0b0c",
    "\u0b0f"-"\u0b10",
    "\u0b13"-"\u0b28",
    "\u0b2a"-"\u0b30",
    "\u0b32"-"\u0b33"
   ]
> }
TOKEN : {
< #SPACESEPCHAR4 : 
   [
    "\u0b35"-"\u0b39",
    "\u0b5c"-"\u0b5d",
    "\u0b5f"-"\u0b61",
    "\u0b66"-"\u0b6f",
    "\u0d85"-"\u0d96",
    "\u0d9a"-"\u0db1",
    "\u0db3"-"\u0dbb",
    "\u0dc0"-"\u0dc6",
    "\u1000"-"\u1021",
    "\u1023"-"\u1027",
    "\u1029"-"\u102a",
    "\u1040"-"\u1049",
    "\u1050"-"\u1055",
    "\u1200"-"\u1206",
    "\u1208"-"\u1246",
    "\u124a"-"\u124d",
    "\u1250"-"\u1256",
    "\u125a"-"\u125d",
    "\u1260"-"\u1286",
    "\u128a"-"\u128d"
   ]
> }
TOKEN : {
< #SPACESEPCHAR5 : 
   [
    "\u1290"-"\u12ae",
    "\u12b2"-"\u12b5",
    "\u12b8"-"\u12be",
    "\u12c2"-"\u12c5",
    "\u12c8"-"\u12ce",
    "\u12d0"-"\u12d6",
    "\u12d8"-"\u12ee",
    "\u12f0"-"\u130e",
    "\u1312"-"\u1315",
    "\u1318"-"\u131e",
    "\u1320"-"\u1346",
    "\u1348"-"\u135a",
    "\u1369"-"\u1371",
    "\u13a0"-"\u13f4",
    "\u1401"-"\u166c",
    "\u166f"-"\u1676",
    "\u1681"-"\u169a",
    "\u16a0"-"\u16ea",
    "\u1700"-"\u170c",
    "\u170e"-"\u1711"
   ]
> }
TOKEN : {
< #SPACESEPCHAR6 : 
   [
    "\u1720"-"\u1731",
    "\u1740"-"\u1751",
    "\u1760"-"\u176c",
    "\u176e"-"\u1770",
    "\u1780"-"\u17b3",
    "\u17e0"-"\u17e9",
    "\u1810"-"\u1819",
    "\u1820"-"\u1877",
    "\u1880"-"\u18a8",
    "\u1900"-"\u191c",
    "\u1946"-"\u196d",
    "\u1970"-"\u1974",
    "\u1d00"-"\u1d6b",
    "\u1e00"-"\u1e9b",
    "\u1ea0"-"\u1ef9",
    "\u1f00"-"\u1f15",
    "\u1f18"-"\u1f1d",
    "\u1f20"-"\u1f45",
    "\u1f48"-"\u1f4d",
    "\u1f50"-"\u1f57"
   ]
> }
TOKEN : {
< #SPACESEPCHAR7 : 
   [
    "\u1f5f"-"\u1f7d",
    "\u1f80"-"\u1fb4",
    "\u1fb6"-"\u1fbc",
    "\u1fc2"-"\u1fc4",
    "\u1fc6"-"\u1fcc",
    "\u1fd0"-"\u1fd3",
    "\u1fd6"-"\u1fdb",
    "\u1fe0"-"\u1fec",
    "\u1ff2"-"\u1ff4",
    "\u1ff6"-"\u1ffc",
    "\u210a"-"\u2113",
    "\u2119"-"\u211d",
    "\u212a"-"\u212d",
    "\u212f"-"\u2131",
    "\u2133"-"\u2139",
    "\u213d"-"\u213f",
    "\u2145"-"\u2149",
    "\ufb00"-"\ufb06",
    "\ufb13"-"\ufb17",
    "\ufb1f"-"\ufb28"
   ]
> }
TOKEN : {
< #SPACESEPCHAR8 : 
   [
    "\ufb2a"-"\ufb36",
    "\ufb38"-"\ufb3c",
    "\ufb40"-"\ufb41",
    "\ufb43"-"\ufb44",
    "\ufb46"-"\ufb4f",
    "\uff10"-"\uff19",
    "\uff21"-"\uff3a",
    "\uff41"-"\uff5a"
   ]
> }
TOKEN : {
< #SPACESEPCHAR9 : 
   "\u00aa" | 
   "\u00b5" | 
   "\u00ba" | 
   "\u02ee" | 
   "\u037a" | 
   "\u0386" | 
   "\u038c" | 
   "\u0559" | 
   "\u0710" | 
   "\u07b1" | 
   "\u093d" | 
   "\u0950" | 
   "\u09b2" | 
   "\u09bd" | 
   "\u0a5e" | 
   "\u0abd" | 
   "\u0ad0" | 
   "\u0b3d" | 
   "\u0b71" | 
   "\u0dbd" | 
   "\u1248" | 
   "\u1258" | 
   "\u1288" | 
   "\u12b0" | 
   "\u12c0" | 
   "\u1310" | 
   "\u17d7" | 
   "\u17dc" | 
   "\u1f59" | 
   "\u1f5b" | 
   "\u1f5d" | 
   "\u1fbe" | 
   "\u2071" | 
   "\u207f" | 
   "\u2102" | 
   "\u2107" | 
   "\u2115" | 
   "\u2124" | 
   "\u2126" | 
   "\u2128" | 
   "\ufb1d" | 
   "\ufb3e"
> }
TOKEN : { < NGRAMTOKEN : (<NONSPACESEPCHAR>) (<NONSPACESEPCHAR>)* > }
TOKEN : {
< #NONSPACESEPCHAR : 
   [
    "\u0600"-"\u06ff",
    "\u0b80"-"\u0d7f",
    "\u0e00"-"\u0fbf",
    "\u10a0"-"\u11ff",
    "\u3001"-"\ud7ff",
    "\uf900"-"\ufaff",
    "\ufb50"-"\ufe4f",
    "\ufe70"-"\ufeff",
    "\uff60"-"\uffdf"
   ]
> }



//TOKEN : { < PUNCTUATION : ~["\t","\r","\n"," ","(",")","\"","'","\\"] > }
TOKEN : { < PUNCTUATION : ( <PUNCTCHAR1> | <PUNCTCHAR2> ) > }

TOKEN : {
< #PUNCTCHAR1 :
   [
    "#"-")",
    "+"-"/",
    ":"-"<",
    ">"-"@",
    "["-"]",
    "{"-"~",
    "\u055a"-"\u055f",
    "\u0589"-"\u058a",
    "\u05f3"-"\u05f4",
    "\u060c"-"\u060d",
    "\u066a"-"\u066d",
    "\u0700"-"\u070d",
    "\u0964"-"\u0965",
    "\u0e5a"-"\u0e5b",
    "\u0f04"-"\u0f12",
    "\u0f3a"-"\u0f3d",
    "\u104a"-"\u104f",
    "\u1361"-"\u1368",
    "\u166d"-"\u166e",
    "\u169b"-"\u169c",
    "\u16eb"-"\u16ed",
    "\u1735"-"\u1736",
    "\u17d4"-"\u17d6",
    "\u17d8"-"\u17da",
    "\u1800"-"\u180a",
    "\u1944"-"\u1945",
    "\u2010"-"\u2027",
    "\u2030"-"\u2043",
    "\u2045"-"\u2051",
    "\u2053"-"\u2054",
    "\u207d"-"\u207e",
    "\u208d"-"\u208e",
    "\u2329"-"\u232a",
    "\u23b4"-"\u23b6",
    "\u2768"-"\u2775",
    "\u27e6"-"\u27eb",
    "\u2983"-"\u2998",
    "\u29d8"-"\u29db",
    "\u29fc"-"\u29fd",
    "\u3001"-"\u3003",
    "\u3008"-"\u3011",
    "\u3014"-"\u301f",
    "\ufd3e"-"\ufd3f",
    "\ufe30"-"\ufe52",
    "\ufe54"-"\ufe61",
    "\ufe6a"-"\ufe6b",
    "\uff01"-"\uff03",
    "\uff05"-"\uff0a",
    "\uff0c"-"\uff0f",
    "\uff1a"-"\uff1b",
    "\uff1f"-"\uff20",
    "\uff3b"-"\uff3d",
    "\uff5f"-"\uff65"
   ]
> }

TOKEN : {
< #PUNCTCHAR2 :
    "!" |
    // " is ", it is treated specially elsewhere
    "*" |
    "_" |
    "`" |
    "\u00a1" |
    "\u00ab" |
    "\u00b7" |
    "\u00bb" |
    "\u00bf" |
    "\u037e" |
    "\u0387" |
    "\u05be" |
    "\u05c0" |
    "\u05c3" |
    "\u061b" |
    "\u061f" |
    "\u06d4" |
    "\u0970" |
    "\u0df4" |
    "\u0e4f" |
    "\u0f85" |
    "\u10fb" |
    "\u2057" |
    "\u3030" |
    "\u303d" |
    "\u30a0" |
    "\u30fb" |
    "\ufe63" |
    "\ufe68" |
    "\uff3f" |
    "\uff5b" |
    "\uff5d"
      > }

/**
 * End of autogenerated rules.  Have a nice day.
 */
