/*
 *   Copyright 2007 Sun Microsystems, Inc. All rights reserved
 * 
 *   Use is subject to license terms.
 */

            
options {
    MULTI=true;
    NODE_PACKAGE="com.sun.labs.minion.retrieval.parser";
    NODE_PREFIX="StrictAST";
    STATIC=false;
    NODE_USES_PARSER=true;
    JAVA_UNICODE_ESCAPE=true;
    // FORCE_LA_CHECK=true;
    // CHOICE_AMBIGUITY_CHECK=5;
}



PARSER_BEGIN(StrictParser)
    package com.sun.labs.minion.retrieval.parser;
    
    public class StrictParser extends Parser{

        public static void main(String args[]) throws Exception {
            StrictParser p = new StrictParser(System.in);
            SimpleNode n = (SimpleNode)p.doParse();
            n.dump(":");
        }
    }

PARSER_END(StrictParser)

SKIP: {
   "\u0020" |
   "\u00a0" | 
   "\u1680" | 
   "\u180e" | 
   "\u2000" | 
   "\u2001" | 
   "\u2002" | 
   "\u2003" | 
   "\u2004" | 
   "\u2005" | 
   "\u2006" | 
   "\u2007" | 
   "\u2008" | 
   "\u2009" | 
   "\u200a" | 
   "\u200b" | 
   "\u2028" | 
   "\u2029" | 
   "\u202f" | 
   "\u205f" | 
   "\u3000" |
   "\r" |
   "\t" |
   "\n"
}

SimpleNode doParse():
{}
{
    q() <EOF>
        {
            return jjtThis;
        }
}


void q(): {Token op=null,val=null;} {

        ( 
         (
          op = <SEQUENCE>
          |
          op = <WEIGHT> (val = <DECIMAL> | val = <INTEGER>)
          )?

         (LOOKAHEAD(10) qe())+
        )
        {
            if (op != null) {
                jjtThis.operator = op.kind;
                if (val != null) {
                    jjtThis.value = val.image;
                }
            }
        }
}

void qe(): {} {
     LOOKAHEAD(200)
     qiOR()
     |
     LOOKAHEAD(200)
     qiAND()
     |
     LOOKAHEAD(200)
     qeparen()
     |
     LOOKAHEAD(200)
     qif()
     |
     LOOKAHEAD(200)
     qUND()
     |
     LOOKAHEAD(200)
     term()
}

void qp(): {} {
     LOOKAHEAD(200)
     qpAND()
     |
     LOOKAHEAD(200)
     qpOR()
     |
     LOOKAHEAD(200)
     qpPASS()
}


void qiAND(): {Token op=null;} {
    (LOOKAHEAD(5) qeparen() | term())

     (LOOKAHEAD(200)
      (LOOKAHEAD(2) (op=<AND>|op=<SAND>) (LOOKAHEAD(200) qiAND() | LOOKAHEAD(2) qeparen() | term()))+
      |
      LOOKAHEAD(200)
      (LOOKAHEAD(2) op = <NEAR> (LOOKAHEAD(200) qiAND() | LOOKAHEAD(2) term() | qeparen()))+
      |
      LOOKAHEAD(200)
      (LOOKAHEAD(2) op = <NEARN> (LOOKAHEAD(200) qiAND() | LOOKAHEAD(2) term() | qeparen()))+
      |
      LOOKAHEAD(200)
      (LOOKAHEAD(2) op = <PAND> (LOOKAHEAD(200) qiAND() | LOOKAHEAD(2) term() | qeparen()))+
      |
      LOOKAHEAD(200)
      (LOOKAHEAD(2) op = <PHRASE> (LOOKAHEAD(200) qiAND() | LOOKAHEAD(2) term() | qeparen()))+
      )

        
        {
            jjtThis.operator = op.kind;
            if (op.kind == StrictParserConstants.NEARN) {
                jjtThis.value = op.image.substring(6, op.image.length() - 1);
            }
        }
}

void qpAND(): {Token op=null,val=null;} {
    (
     op = <AND>
     |
     op = <SAND>
     |
     op = <NEAR>
     |
     op = <NEARN>
     |
     op = <PAND>
     |
     op = <PHRASE>
     |
     op = <WITHIN> val = <INTEGER>
     ) (LOOKAHEAD(10) (LOOKAHEAD(10) qeparen() | term()))+
        {
            jjtThis.operator = op.kind;
            if (op.kind == StrictParserConstants.NEARN) {
                jjtThis.value = op.image.substring(6, op.image.length() - 1);
            }
            if (op.kind == StrictParserConstants.WITHIN) {
                jjtThis.value = val.image;
            }
        }
}

void qiOR(): {Token op=null;} {
    // Or is either an AND followed by a bunch of ORs
    // or a term followed by a bunch of ORs.

    LOOKAHEAD(200)
   (
    // The AND case:

    (LOOKAHEAD(200) qiAND() | LOOKAHEAD(200) qUND())

    (LOOKAHEAD(8)
     (
      op = <OR>
      |
      op = <SOR>
      |
      op = <TOR>
      )
     
     (LOOKAHEAD(12) qe()
      |
      LOOKAHEAD(12) term()
      |
      qeparen()
      )
     )+
         {
            jjtThis.operator = op.kind;
        }
    )
    |
   (
    // The term case:

    (LOOKAHEAD(2) term() | qeparen())

    (LOOKAHEAD(8)
     (
      op = <OR>
      |
      op = <SOR>
      |
      op = <TOR>
      )

     (LOOKAHEAD(12) qe()
      |
      LOOKAHEAD(12) term()
      |
      qeparen()
      )
     )+
    )
        {
            jjtThis.operator = op.kind;
        }
}

void qpOR(): {Token op=null;} {
    (op=<OR>|op=<SOR>|op=<TOR>) (LOOKAHEAD(2) (LOOKAHEAD(10) qeparen() | term()))+

        {
            jjtThis.operator = op.kind;
        }
}

void qUND(): {} {
     (LOOKAHEAD(2) term() | qeparen()) (LOOKAHEAD(200) (LOOKAHEAD(2) term() | qeparen()))+
}

void qpPASS(): {Token op=null;} {
     op = <PASSAGE>
         (LOOKAHEAD(10)

          (
           LOOKAHEAD(10) qe()

           | LOOKAHEAD(10) term()

           | qeparen()
          )
         )+

    {
        jjtThis.operator = op.kind;
    }
}


void term(): {Token op=null, val=null, unary=null;} {
    (LOOKAHEAD(12)
     unary = <NOT>
     |
     unary = <IF>
     |
     unary = <HIDE>
     |
     unary = <UNDEFINED>)?
     {
         if (unary != null)
             jjtThis.unary = unary.kind;
     }

    (
     LOOKAHEAD(12)
     qif()
     |
     LOOKAHEAD(12)
     ( op = <EXACT>
         {
            jjtThis.doExact = true;
         }
       |
       op = <MORPH>
         {
            jjtThis.doMorph = true;
         }
       |
       op = <STEM>
         {
            jjtThis.doStem = true;
         }
       |
       op = <EXPAND>
         {
            jjtThis.doExpand = true;
         }
       |
       //op = <WORD>
       //  {
       //     jjtThis.doMorph = true;
       //  }
       //|
       //op = <WILD>
       //  {
       //     jjtThis.doWild = true;
       //  }
       //|
       op = <CASE>
         {
            jjtThis.matchCase = true;
         }
     )*
     (val = <WORDSTRING>
         {
            if (!jjtThis.doExact && !jjtThis.doStem && !jjtThis.doExpand)
                jjtThis.doMorph = true;
            if (val != null)
                jjtThis.value = val.image;
        }
     |
      val = <DECIMAL>
        {
            if (!jjtThis.doExact && !jjtThis.doStem && !jjtThis.doExpand)
                jjtThis.doMorph = true;
            if (val != null)
                jjtThis.value = val.image;
        }
     |
      val = <INTEGER>
        {
            if (!jjtThis.doExact && !jjtThis.doStem && !jjtThis.doExpand)
                jjtThis.doMorph = true;
            if (val != null)
                jjtThis.value = val.image;
        }
     )
    )
}

void qeparen(): {Token op=null, val=null, unary=null;} {
    (LOOKAHEAD(10)
     unary = <NOT>
     |
     unary = <IF>
     |
     unary = <HIDE>)?
     {
         if (unary != null)
             jjtThis.unary = unary.kind;
     }

    <LP>

     //  (LOOKAHEAD(4)
        (
         (
          op = <SEQUENCE>
          |
          op = <WEIGHT> (val = <DECIMAL> | val = <INTEGER>)
          )?

         (
          LOOKAHEAD(10)
          qe()
          |
          LOOKAHEAD(10)
          qp()
         )+
        )

        {
            if (op != null) {
                jjtThis.operator = op.kind;
                if (val != null) {
                    jjtThis.value = val.image;
                }
            }
        }
    

     <RP>
}


void qif(): {} {
    (fieldname() ( 
                  LOOKAHEAD(2)
                  ( indexed_fieldoperator() (
                                             LOOKAHEAD(12)
                                             qeparen()
                                             |
                                             LOOKAHEAD(12)
                                             term()
                                             ))
                  |
                  LOOKAHEAD(2)
                  ( saved_fieldoperator() saved_fieldvalue() ) ) )
        }


void fieldname(): {Token val=null;} {
    val = <WORDSTRING>
        
        {
            jjtThis.value = val.image;
        }
}

void indexed_fieldoperator(): {Token op=null;} {
    op = <CONTAINS> 

        {
            jjtThis.operator = op.kind;
        }
}

void saved_fieldoperator(): {Token op=null;} {
   (
    op = <STARTS> 
    |
    op = <ENDS> 
    |
    op = <MATCHES> 
    |
    op = <SUBSTRING>
    |
    op = <LESS>
    |
    op = <LT>
    |
    op = <EQUALS> 
    |
    op = <NOTEQUAL> 
    |
    op = <GREATER>
    |
    op = <GT>
    |
    op = <LEQ> 
    |
    op = <GEQ>
    |
    op = <SIMILAR>
   )
        {
            jjtThis.operator = op.kind;
        }
}
void saved_fieldvalue(): {Token val=null;} {
   (
    val = <WORDSTRING> 
    |
    val = <DECIMAL>
    |
    val = <INTEGER>
   )    
        {
            jjtThis.value = val.image;
        }
}


TOKEN : { <AND: "<AND>"|"<and>" >}
TOKEN : { <PAND: "<PAND>"|"<pand>" >}
TOKEN : { <OR: "<OR>"|"<or>" >}
TOKEN : { <TOR: "<TOR>"|"<tor>" >}
TOKEN : { <SAND: "<SAND>"|"<sand>" >}
TOKEN : { <SOR: "<SOR"|"<sor>" >}
TOKEN : { <PHRASE: "<PHRASE>"|"<phrase>" >}
TOKEN : { <EXACT: "<EXACT>"|"<exact>" >}
TOKEN : { <CASE: "<CASE>"|"<case>" >}
TOKEN : { <HIDE: "<HIDE>"|"<hide>" >}
TOKEN : { <MORPH: "<MORPH>"|"<morph>" >}
TOKEN : { <WILD: "<WILD>"|"<wild>" >}
TOKEN : { <STEM: "<STEM>"|"<stem>" >}
TOKEN : { <WORD: "<WORD>"|"<word>" >}
TOKEN : { <EXPAND: "<EXPAND>"|"<expand>" >}
TOKEN : { <STARTS: "<STARTS>"|"<starts>" >}
TOKEN : { <ENDS: "<ENDS>"|"<ends>" >}
TOKEN : { <MATCHES: "<MATCHES>"|"<matches>" >}
TOKEN : { <SUBSTRING: "<SUBSTRING>"|"<substring>" >}
TOKEN : { <SIMILAR: "<SIMILAR>"|"<similar>" >}
TOKEN : { <PASSAGE: "<PASSAGE>"|"<passage>" >}
TOKEN : { <SPANS: "<SPANS>"|"<spans>" >}
TOKEN : { <SEQUENCE: "<SEQUENCE>"|"<sequence>" >}
TOKEN : { <IF: "<IF>"|"<if>" >}
TOKEN : { <CONTAINS: "<CONTAINS>"|"<contains>" >}
TOKEN : { <NEAR: "<NEAR>"|"<near>" >}
TOKEN : { <NEARN: "<NEAR/"<INTEGER>">"|"<near/"<INTEGER>">" >}
TOKEN : { <WEIGHT: "<WEIGHT>"|"<weight>" >}
TOKEN : { <NOT: "<NOT>"|"<not>" >}
TOKEN : { <UNDEFINED: "<UNDEFINED>"|"<undefined>"|"<UNDEF>"|"<undef>" >}
TOKEN : { <WITHIN: "<WITHIN>"|"<within>" >}
TOKEN : { <NOTEQUAL: "<NOT EQUAL>"|"<not equal>"|"!=" >}
TOKEN : { <EQUALS: "<EQUALS>"|"<equals>"|"=" >}
TOKEN : { <LESS: "<LESS>"|"<less>" >}
TOKEN : { <GREATER: "<GREATER>"|"<greater>" >}
TOKEN : { <LEQ: "<LEQ>"|"<leq>"|"<=" >}
TOKEN : { <GEQ: "<GEQ>"|"<geq>"|">=" >}
TOKEN : { <LP: ["("] >}
TOKEN : { <RP: [")"] >}
TOKEN : { <LT: ["<"] >}
TOKEN : { <GT: [">"] >}
// TOKEN : { <EH: "EH?" >}
TOKEN : { <BSLASH: ["\\"] >}
TOKEN : { <DUBQUOTE: ["\""] >}
TOKEN : { <SINQUOTE: ["'"] >}
// TOKEN : { <COMMA: [","] >}
TOKEN : { <INTEGER: (["0"-"9"])+ >}
TOKEN : { <DECIMAL: ((<INTEGER>)? "." <INTEGER>) >}
TOKEN : { <WORDSTRING: (<NGRAMTOKEN>|<VALIDCHAR>|<PUNCTUATION>|<BSLASH><SINQUOTE>|<BSLASH><BSLASH>|<BSLASH><LP>|<BSLASH><RP>|<BSLASH>"=")+
                     | (<DUBQUOTE>) (<NGRAMTOKEN>|<VALIDCHAR>|<SINQUOTE>|<PUNCTUATION>|<WHITESPACE>|<LP>|<RP>|<BSLASH><DUBQUOTE>|<BSLASH><SINQUOTE>|<BSLASH><BSLASH>|<BSLASH><LP>|<BSLASH><RP>|<BSLASH>"=")* (<DUBQUOTE>)
                     | (<SINQUOTE>) (<NGRAMTOKEN>|<VALIDCHAR>|<PUNCTUATION>|<WHITESPACE>|<LP>|<RP>|<BSLASH><SINQUOTE>|<BSLASH><BSLASH>|<BSLASH><DUBQUOTE>|<BSLASH><LP>|<BSLASH><RP>|<BSLASH>"=")* (<SINQUOTE>)
                      >}
TOKEN : { <LETTER: ["a"-"z","A"-"Z"] >}
TOKEN : { <VALIDCHAR: (<SPACESEPCHAR>) >}


/*
 * The following definitions are used by the definitions above as a guide
 * for what is a word character vs. a space character.
 */ 



/**
 * The following token rules are autogenerated by com.sun.labs.minion.document.tokenizer.JCCRules.
 * DO NOT HAND EDIT THEM!
 */


TOKEN : { < #WHITESPACE : (<WHITECHAR>)+ > }
TOKEN : {
< #WHITECHAR : 
   "\u0020" | 
   "\u00a0" | 
   "\u1680" | 
   "\u180e" | 
   "\u2000" | 
   "\u2001" | 
   "\u2002" | 
   "\u2003" | 
   "\u2004" | 
   "\u2005" | 
   "\u2006" | 
   "\u2007" | 
   "\u2008" | 
   "\u2009" | 
   "\u200a" | 
   "\u2028" | 
   "\u2029" | 
   "\u202f" | 
   "\u205f" | 
   "\u3000" |
   "\t" |
   "\r" |
   "\n"
> }
TOKEN : { < SPACESEPTOKEN : (<SPACESEPCHAR> | <SPACESEPCHAR>)+ > }
TOKEN: { < SPACESEPCHAR :
   (
    <SPACESEPCHAR1> | 
    <SPACESEPCHAR2> | 
    <SPACESEPCHAR3> | 
    <SPACESEPCHAR4> | 
    <SPACESEPCHAR5> | 
    <SPACESEPCHAR6> | 
    <SPACESEPCHAR7> | 
    <SPACESEPCHAR8> | 
    <SPACESEPCHAR9> | 
    <SPACESEPCHAR10> | 
    <SPACESEPCHAR11>
   )
> }
TOKEN : {
< #SPACESEPCHAR1 : 
   [
    "\u0030"-"\u0039",
    "\u0041"-"\u005a",
    "\u0061"-"\u007a",
    "\u00c0"-"\u00d6",
    "\u00d8"-"\u00f6",
    "\u00f8"-"\u02c1",
    "\u02c6"-"\u02d1",
    "\u02e0"-"\u02e4",
    "\u0370"-"\u0374",
    "\u0376"-"\u0377",
    "\u037a"-"\u037d",
    "\u0388"-"\u038a",
    "\u038e"-"\u03a1",
    "\u03a3"-"\u03f5",
    "\u03f7"-"\u0481",
    "\u048a"-"\u0527",
    "\u0531"-"\u0556",
    "\u0561"-"\u0587",
    "\u05d0"-"\u05ea",
    "\u05f0"-"\u05f2"
   ]
> }
TOKEN : {
< #SPACESEPCHAR2 : 
   [
    "\u0712"-"\u072f",
    "\u074d"-"\u07a5",
    "\u07c0"-"\u07ea",
    "\u07f4"-"\u07f5",
    "\u0800"-"\u0815",
    "\u0840"-"\u0858",
    "\u0904"-"\u0939",
    "\u0958"-"\u0961",
    "\u0966"-"\u096f",
    "\u0971"-"\u0977",
    "\u0979"-"\u097f",
    "\u0985"-"\u098c",
    "\u098f"-"\u0990",
    "\u0993"-"\u09a8",
    "\u09aa"-"\u09b0",
    "\u09b6"-"\u09b9",
    "\u09dc"-"\u09dd",
    "\u09df"-"\u09e1",
    "\u09e6"-"\u09f1",
    "\u0a05"-"\u0a0a"
   ]
> }
TOKEN : {
< #SPACESEPCHAR3 : 
   [
    "\u0a0f"-"\u0a10",
    "\u0a13"-"\u0a28",
    "\u0a2a"-"\u0a30",
    "\u0a32"-"\u0a33",
    "\u0a35"-"\u0a36",
    "\u0a38"-"\u0a39",
    "\u0a59"-"\u0a5c",
    "\u0a66"-"\u0a6f",
    "\u0a72"-"\u0a74",
    "\u0a85"-"\u0a8d",
    "\u0a8f"-"\u0a91",
    "\u0a93"-"\u0aa8",
    "\u0aaa"-"\u0ab0",
    "\u0ab2"-"\u0ab3",
    "\u0ab5"-"\u0ab9",
    "\u0ae0"-"\u0ae1",
    "\u0ae6"-"\u0aef",
    "\u0b05"-"\u0b0c",
    "\u0b0f"-"\u0b10",
    "\u0b13"-"\u0b28"
   ]
> }
TOKEN : {
< #SPACESEPCHAR4 : 
   [
    "\u0b2a"-"\u0b30",
    "\u0b32"-"\u0b33",
    "\u0b35"-"\u0b39",
    "\u0b5c"-"\u0b5d",
    "\u0b5f"-"\u0b61",
    "\u0b66"-"\u0b6f",
    "\u0d85"-"\u0d96",
    "\u0d9a"-"\u0db1",
    "\u0db3"-"\u0dbb",
    "\u0dc0"-"\u0dc6",
    "\u1000"-"\u102a",
    "\u103f"-"\u1049",
    "\u1050"-"\u1055",
    "\u105a"-"\u105d",
    "\u1065"-"\u1066",
    "\u106e"-"\u1070",
    "\u1075"-"\u1081",
    "\u1090"-"\u1099",
    "\u1200"-"\u1248",
    "\u124a"-"\u124d"
   ]
> }
TOKEN : {
< #SPACESEPCHAR5 : 
   [
    "\u1250"-"\u1256",
    "\u125a"-"\u125d",
    "\u1260"-"\u1288",
    "\u128a"-"\u128d",
    "\u1290"-"\u12b0",
    "\u12b2"-"\u12b5",
    "\u12b8"-"\u12be",
    "\u12c2"-"\u12c5",
    "\u12c8"-"\u12d6",
    "\u12d8"-"\u1310",
    "\u1312"-"\u1315",
    "\u1318"-"\u135a",
    "\u1380"-"\u138f",
    "\u13a0"-"\u13f4",
    "\u1401"-"\u166c",
    "\u166f"-"\u167f",
    "\u1681"-"\u169a",
    "\u16a0"-"\u16ea",
    "\u1700"-"\u170c",
    "\u170e"-"\u1711"
   ]
> }
TOKEN : {
< #SPACESEPCHAR6 : 
   [
    "\u1720"-"\u1731",
    "\u1740"-"\u1751",
    "\u1760"-"\u176c",
    "\u176e"-"\u1770",
    "\u1780"-"\u17b3",
    "\u17e0"-"\u17e9",
    "\u1810"-"\u1819",
    "\u1820"-"\u1877",
    "\u1880"-"\u18a8",
    "\u18b0"-"\u18f5",
    "\u1900"-"\u191c",
    "\u1946"-"\u196d",
    "\u1970"-"\u1974",
    "\u1980"-"\u19ab",
    "\u19c1"-"\u19c7",
    "\u19d0"-"\u19d9",
    "\u1a00"-"\u1a16",
    "\u1a20"-"\u1a54",
    "\u1a80"-"\u1a89",
    "\u1a90"-"\u1a99"
   ]
> }
TOKEN : {
< #SPACESEPCHAR7 : 
   [
    "\u1b05"-"\u1b33",
    "\u1b45"-"\u1b4b",
    "\u1b50"-"\u1b59",
    "\u1b83"-"\u1ba0",
    "\u1bae"-"\u1bb9",
    "\u1bc0"-"\u1be5",
    "\u1c00"-"\u1c23",
    "\u1c40"-"\u1c49",
    "\u1c4d"-"\u1c7d",
    "\u1ce9"-"\u1cec",
    "\u1cee"-"\u1cf1",
    "\u1d00"-"\u1dbf",
    "\u1e00"-"\u1f15",
    "\u1f18"-"\u1f1d",
    "\u1f20"-"\u1f45",
    "\u1f48"-"\u1f4d",
    "\u1f50"-"\u1f57",
    "\u1f5f"-"\u1f7d",
    "\u1f80"-"\u1fb4",
    "\u1fb6"-"\u1fbc"
   ]
> }
TOKEN : {
< #SPACESEPCHAR8 : 
   [
    "\u1fc2"-"\u1fc4",
    "\u1fc6"-"\u1fcc",
    "\u1fd0"-"\u1fd3",
    "\u1fd6"-"\u1fdb",
    "\u1fe0"-"\u1fec",
    "\u1ff2"-"\u1ff4",
    "\u1ff6"-"\u1ffc",
    "\u2090"-"\u209c",
    "\u210a"-"\u2113",
    "\u2119"-"\u211d",
    "\u212a"-"\u212d",
    "\u212f"-"\u2139",
    "\u213c"-"\u213f",
    "\u2145"-"\u2149",
    "\u2183"-"\u2184",
    "\u2c00"-"\u2c2e",
    "\u2c30"-"\u2c5e",
    "\u2c60"-"\u2ce4",
    "\u2ceb"-"\u2cee",
    "\u2d00"-"\u2d25"
   ]
> }
TOKEN : {
< #SPACESEPCHAR9 : 
   [
    "\u2d30"-"\u2d65",
    "\u2d80"-"\u2d96",
    "\u2da0"-"\u2da6",
    "\u2da8"-"\u2dae",
    "\u2db0"-"\u2db6",
    "\u2db8"-"\u2dbe",
    "\u2dc0"-"\u2dc6",
    "\u2dc8"-"\u2dce",
    "\u2dd0"-"\u2dd6",
    "\u2dd8"-"\u2dde",
    "\ufb00"-"\ufb06",
    "\ufb13"-"\ufb17",
    "\ufb1f"-"\ufb28",
    "\ufb2a"-"\ufb36",
    "\ufb38"-"\ufb3c",
    "\ufb40"-"\ufb41",
    "\ufb43"-"\ufb44",
    "\ufb46"-"\ufb4f",
    "\uff10"-"\uff19",
    "\uff21"-"\uff3a"
   ]
> }
TOKEN : {
< #SPACESEPCHAR10 : 
   [
    "\uff41"-"\uff5a"
   ]
> }
TOKEN : {
< #SPACESEPCHAR11 : 
   "\u00aa" | 
   "\u00b5" | 
   "\u00ba" | 
   "\u02ec" | 
   "\u02ee" | 
   "\u0386" | 
   "\u038c" | 
   "\u0559" | 
   "\u0710" | 
   "\u07b1" | 
   "\u07fa" | 
   "\u081a" | 
   "\u0824" | 
   "\u0828" | 
   "\u093d" | 
   "\u0950" | 
   "\u09b2" | 
   "\u09bd" | 
   "\u09ce" | 
   "\u0a5e" | 
   "\u0abd" | 
   "\u0ad0" | 
   "\u0b3d" | 
   "\u0b71" | 
   "\u0dbd" | 
   "\u1061" | 
   "\u108e" | 
   "\u1258" | 
   "\u12c0" | 
   "\u17d7" | 
   "\u17dc" | 
   "\u18aa" | 
   "\u1aa7" | 
   "\u1f59" | 
   "\u1f5b" | 
   "\u1f5d" | 
   "\u1fbe" | 
   "\u2071" | 
   "\u207f" | 
   "\u2102" | 
   "\u2107" | 
   "\u2115" | 
   "\u2124" | 
   "\u2126" | 
   "\u2128" | 
   "\u214e" | 
   "\u2d6f" | 
   "\u2e2f" | 
   "\ufb1d" | 
   "\ufb3e"
> }
TOKEN : { < NGRAMTOKEN : (<NONSPACESEPCHAR>) (<NONSPACESEPCHAR>)* > }
TOKEN : {
< #NONSPACESEPCHAR : 
   [
    "\u0600"-"\u06ff",
    "\u0b80"-"\u0d7f",
    "\u0e00"-"\u0fbf",
    "\u10a0"-"\u11ff",
    "\u3001"-"\ud7ff",
    "\uf900"-"\ufaff",
    "\ufb50"-"\ufe4f",
    "\ufe70"-"\ufeff",
    "\uff60"-"\uffdf"
   ]
> }
TOKEN: { < PUNCTUATION :
   (
    <PUNCTCHAR1> | 
    <PUNCTCHAR2> | 
    <PUNCTCHAR3> | 
    <PUNCTCHAR4> | 
    <PUNCTCHAR5>
   )
> }
TOKEN : {
< #PUNCTCHAR1 : 
   [
    "\u0000"-"\u001f",
    // " is \u0022, it is treated specially elsewhere
    "\u0023"-"\u0026",
    // ' is \u0027, it is treated specially elsewhere
    // ( is \u0028, it is treated specially elsewhere
    // ) is \u0029, it is treated specially elsewhere
    "\u002a"-"\u002f",
    "\u003a"-"\u0040",
    "\u005b"-"\u0060",
    "\u007b"-"\u009f",
    "\u00a1"-"\u00a9",
    "\u00ab"-"\u00b4",
    "\u00b6"-"\u00b9",
    "\u00bb"-"\u00bf",
    "\u02c2"-"\u02c5",
    "\u02d2"-"\u02df",
    "\u02e5"-"\u02eb",
    "\u02ef"-"\u036f",
    "\u0378"-"\u0379",
    "\u037e"-"\u0385",
    "\u0482"-"\u0489",
    "\u0528"-"\u0530",
    "\u0557"-"\u0558",
    "\u055a"-"\u0560",
    "\u0588"-"\u05cf",
    "\u05eb"-"\u05ef",
    "\u05f3"-"\u05ff",
    "\u0700"-"\u070f",
    "\u0730"-"\u074c",
    "\u07a6"-"\u07b0",
    "\u07b2"-"\u07bf",
    "\u07eb"-"\u07f3",
    "\u07f6"-"\u07f9",
    "\u07fb"-"\u07ff",
    "\u0816"-"\u0819",
    "\u081b"-"\u0823",
    "\u0825"-"\u0827",
    "\u0829"-"\u083f",
    "\u0859"-"\u0903",
    "\u093a"-"\u093c",
    "\u093e"-"\u094f",
    "\u0951"-"\u0957",
    "\u0962"-"\u0965",
    "\u0980"-"\u0984",
    "\u098d"-"\u098e",
    "\u0991"-"\u0992",
    "\u09b3"-"\u09b5",
    "\u09ba"-"\u09bc",
    "\u09be"-"\u09cd",
    "\u09cf"-"\u09db",
    "\u09e2"-"\u09e5",
    "\u09f2"-"\u0a04",
    "\u0a0b"-"\u0a0e",
    "\u0a11"-"\u0a12",
    "\u0a3a"-"\u0a58"
   ]
> }
TOKEN : {
< #PUNCTCHAR2 : 
   [
    "\u0a5f"-"\u0a65",
    "\u0a70"-"\u0a71",
    "\u0a75"-"\u0a84",
    "\u0aba"-"\u0abc",
    "\u0abe"-"\u0acf",
    "\u0ad1"-"\u0adf",
    "\u0ae2"-"\u0ae5",
    "\u0af0"-"\u0b04",
    "\u0b0d"-"\u0b0e",
    "\u0b11"-"\u0b12",
    "\u0b3a"-"\u0b3c",
    "\u0b3e"-"\u0b5b",
    "\u0b62"-"\u0b65",
    "\u0b72"-"\u0b7f",
    "\u0d80"-"\u0d84",
    "\u0d97"-"\u0d99",
    "\u0dbe"-"\u0dbf",
    "\u0dc7"-"\u0dff",
    "\u0fc0"-"\u0fff",
    "\u102b"-"\u103e",
    "\u104a"-"\u104f",
    "\u1056"-"\u1059",
    "\u105e"-"\u1060",
    "\u1062"-"\u1064",
    "\u1067"-"\u106d",
    "\u1071"-"\u1074",
    "\u1082"-"\u108d",
    "\u109a"-"\u109f",
    "\u124e"-"\u124f",
    "\u125e"-"\u125f",
    "\u128e"-"\u128f",
    "\u12b6"-"\u12b7",
    "\u12c6"-"\u12c7",
    "\u1316"-"\u1317",
    "\u135b"-"\u137f",
    "\u1390"-"\u139f",
    "\u13f5"-"\u1400",
    "\u166d"-"\u166e",
    "\u169b"-"\u169f",
    "\u16eb"-"\u16ff",
    "\u1712"-"\u171f",
    "\u1732"-"\u173f",
    "\u1752"-"\u175f",
    "\u1771"-"\u177f",
    "\u17b4"-"\u17d6",
    "\u17d8"-"\u17db",
    "\u17dd"-"\u17df",
    "\u17ea"-"\u180d",
    "\u181a"-"\u181f",
    "\u1878"-"\u187f"
   ]
> }
TOKEN : {
< #PUNCTCHAR3 : 
   [
    "\u18ab"-"\u18af",
    "\u18f6"-"\u18ff",
    "\u191d"-"\u1945",
    "\u196e"-"\u196f",
    "\u1975"-"\u197f",
    "\u19ac"-"\u19c0",
    "\u19c8"-"\u19cf",
    "\u19da"-"\u19ff",
    "\u1a17"-"\u1a1f",
    "\u1a55"-"\u1a7f",
    "\u1a8a"-"\u1a8f",
    "\u1a9a"-"\u1aa6",
    "\u1aa8"-"\u1b04",
    "\u1b34"-"\u1b44",
    "\u1b4c"-"\u1b4f",
    "\u1b5a"-"\u1b82",
    "\u1ba1"-"\u1bad",
    "\u1bba"-"\u1bbf",
    "\u1be6"-"\u1bff",
    "\u1c24"-"\u1c3f",
    "\u1c4a"-"\u1c4c",
    "\u1c7e"-"\u1ce8",
    "\u1cf2"-"\u1cff",
    "\u1dc0"-"\u1dff",
    "\u1f16"-"\u1f17",
    "\u1f1e"-"\u1f1f",
    "\u1f46"-"\u1f47",
    "\u1f4e"-"\u1f4f",
    "\u1f7e"-"\u1f7f",
    "\u1fbf"-"\u1fc1",
    "\u1fcd"-"\u1fcf",
    "\u1fd4"-"\u1fd5",
    "\u1fdc"-"\u1fdf",
    "\u1fed"-"\u1ff1",
    "\u1ffd"-"\u1fff",
    "\u200b"-"\u2027",
    "\u202a"-"\u202e",
    "\u2030"-"\u205e",
    "\u2060"-"\u2070",
    "\u2072"-"\u207e",
    "\u2080"-"\u208f",
    "\u209d"-"\u2101",
    "\u2103"-"\u2106",
    "\u2108"-"\u2109",
    "\u2116"-"\u2118",
    "\u211e"-"\u2123",
    "\u213a"-"\u213b",
    "\u2140"-"\u2144",
    "\u214a"-"\u214d",
    "\u214f"-"\u2182"
   ]
> }
TOKEN : {
< #PUNCTCHAR4 : 
   [
    "\u2185"-"\u2bff",
    "\u2ce5"-"\u2cea",
    "\u2cef"-"\u2cff",
    "\u2d26"-"\u2d2f",
    "\u2d66"-"\u2d6e",
    "\u2d70"-"\u2d7f",
    "\u2d97"-"\u2d9f",
    "\u2ddf"-"\u2e2e",
    "\u2e30"-"\u2fff",
    "\ud800"-"\uf8ff",
    "\ufb07"-"\ufb12",
    "\ufb18"-"\ufb1c",
    "\ufe50"-"\ufe6f",
    "\uff00"-"\uff0f",
    "\uff1a"-"\uff20",
    "\uff3b"-"\uff40",
    "\uff5b"-"\uff5f",
    "\uffe0"-"\ufffe"
   ]
> }
TOKEN : {
< #PUNCTCHAR5 : 
   "\u0021" |
   "\u00d7" | 
   "\u00f7" | 
   "\u02ed" | 
   "\u0375" | 
   "\u0387" | 
   "\u038b" | 
   "\u038d" | 
   "\u03a2" | 
   "\u03f6" | 
   "\u0711" | 
   "\u0970" | 
   "\u0978" | 
   "\u09a9" | 
   "\u09b1" | 
   "\u09de" | 
   "\u0a29" | 
   "\u0a31" | 
   "\u0a34" | 
   "\u0a37" | 
   "\u0a5d" | 
   "\u0a8e" | 
   "\u0a92" | 
   "\u0aa9" | 
   "\u0ab1" | 
   "\u0ab4" | 
   "\u0b29" | 
   "\u0b31" | 
   "\u0b34" | 
   "\u0b5e" | 
   "\u0b70" | 
   "\u0db2" | 
   "\u0dbc" | 
   "\u108f" | 
   "\u1249" | 
   "\u1257" | 
   "\u1259" | 
   "\u1289" | 
   "\u12b1" | 
   "\u12bf" | 
   "\u12c1" | 
   "\u12d7" | 
   "\u1311" | 
   "\u170d" | 
   "\u176d" | 
   "\u180f" | 
   "\u18a9" | 
   "\u1ced" | 
   "\u1f58" | 
   "\u1f5a" | 
   "\u1f5c" | 
   "\u1f5e" | 
   "\u1fb5" | 
   "\u1fbd" | 
   "\u1fc5" | 
   "\u1ff5" | 
   "\u2114" | 
   "\u2125" | 
   "\u2127" | 
   "\u2129" | 
   "\u212e" | 
   "\u2c2f" | 
   "\u2c5f" | 
   "\u2da7" | 
   "\u2daf" | 
   "\u2db7" | 
   "\u2dbf" | 
   "\u2dc7" | 
   "\u2dcf" | 
   "\u2dd7" | 
   "\ufb1e" | 
   "\ufb29" | 
   "\ufb37" | 
   "\ufb3d" | 
   "\ufb3f" | 
   "\ufb42" | 
   "\ufb45"
> }



/**
 * End of autogenerated rules.  Have a nice day.
 */
