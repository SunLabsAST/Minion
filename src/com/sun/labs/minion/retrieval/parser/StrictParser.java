/* Generated By:JJTree&JavaCC: Do not edit this line. StrictParser.java */
    package com.sun.labs.minion.retrieval.parser;

    public class StrictParser extends Parser/*@bgen(jjtree)*/implements StrictParserTreeConstants, StrictParserConstants {/*@bgen(jjtree)*/
  protected JJTStrictParserState jjtree = new JJTStrictParserState();
        public static void main(String args[]) throws Exception {
            StrictParser p = new StrictParser(System.in);
            SimpleNode n = (SimpleNode)p.doParse();
            n.dump(":");
        }

  final public SimpleNode doParse() throws ParseException {
 /*@bgen(jjtree) doParse */
  StrictASTdoParse jjtn000 = new StrictASTdoParse(this, JJTDOPARSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      q();
      jj_consume_token(0);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
            {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void q() throws ParseException {
           /*@bgen(jjtree) q */
           StrictASTq jjtn000 = new StrictASTq(this, JJTQ);
           boolean jjtc000 = true;
           jjtree.openNodeScope(jjtn000);Token op=null,val=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEQUENCE:
      case WEIGHT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEQUENCE:
          op = jj_consume_token(SEQUENCE);
          break;
        case WEIGHT:
          op = jj_consume_token(WEIGHT);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DECIMAL:
            val = jj_consume_token(DECIMAL);
            break;
          case INTEGER:
            val = jj_consume_token(INTEGER);
            break;
          default:
            jj_la1[0] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      label_1:
      while (true) {
        qe();
        if (jj_2_1(10)) {
          ;
        } else {
          break label_1;
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
            if (op != null) {
                jjtn000.operator = op.kind;
                if (val != null) {
                    jjtn000.value = val.image;
                }
            }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void qe() throws ParseException {
            /*@bgen(jjtree) qe */
  StrictASTqe jjtn000 = new StrictASTqe(this, JJTQE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_2(200)) {
        qiOR();
      } else if (jj_2_3(200)) {
        qiAND();
      } else if (jj_2_4(200)) {
        qeparen();
      } else if (jj_2_5(200)) {
        qif();
      } else if (jj_2_6(200)) {
        qUND();
      } else if (jj_2_7(200)) {
        term();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
  }

  final public void qp() throws ParseException {
            /*@bgen(jjtree) qp */
  StrictASTqp jjtn000 = new StrictASTqp(this, JJTQP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_8(200)) {
        qpAND();
      } else if (jj_2_9(200)) {
        qpOR();
      } else if (jj_2_10(200)) {
        qpPASS();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
  }

  final public void qiAND() throws ParseException {
               /*@bgen(jjtree) qiAND */
               StrictASTqiAND jjtn000 = new StrictASTqiAND(this, JJTQIAND);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);Token op=null;
    try {
      if (jj_2_11(5)) {
        qeparen();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXACT:
        case CASE:
        case HIDE:
        case MORPH:
        case STEM:
        case EXPAND:
        case IF:
        case NOT:
        case UNDEFINED:
        case INTEGER:
        case DECIMAL:
        case WORDSTRING:
          term();
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      if (jj_2_27(200)) {
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AND:
            op = jj_consume_token(AND);
            break;
          case SAND:
            op = jj_consume_token(SAND);
            break;
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          if (jj_2_12(200)) {
            qiAND();
          } else if (jj_2_13(2)) {
            qeparen();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EXACT:
            case CASE:
            case HIDE:
            case MORPH:
            case STEM:
            case EXPAND:
            case IF:
            case NOT:
            case UNDEFINED:
            case INTEGER:
            case DECIMAL:
            case WORDSTRING:
              term();
              break;
            default:
              jj_la1[5] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          if (jj_2_14(2)) {
            ;
          } else {
            break label_2;
          }
        }
      } else if (jj_2_28(200)) {
        label_3:
        while (true) {
          op = jj_consume_token(NEAR);
          if (jj_2_15(200)) {
            qiAND();
          } else if (jj_2_16(2)) {
            term();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case HIDE:
            case IF:
            case NOT:
            case LP:
              qeparen();
              break;
            default:
              jj_la1[6] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          if (jj_2_17(2)) {
            ;
          } else {
            break label_3;
          }
        }
      } else if (jj_2_29(200)) {
        label_4:
        while (true) {
          op = jj_consume_token(NEARN);
          if (jj_2_18(200)) {
            qiAND();
          } else if (jj_2_19(2)) {
            term();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case HIDE:
            case IF:
            case NOT:
            case LP:
              qeparen();
              break;
            default:
              jj_la1[7] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          if (jj_2_20(2)) {
            ;
          } else {
            break label_4;
          }
        }
      } else if (jj_2_30(200)) {
        label_5:
        while (true) {
          op = jj_consume_token(PAND);
          if (jj_2_21(200)) {
            qiAND();
          } else if (jj_2_22(2)) {
            term();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case HIDE:
            case IF:
            case NOT:
            case LP:
              qeparen();
              break;
            default:
              jj_la1[8] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          if (jj_2_23(2)) {
            ;
          } else {
            break label_5;
          }
        }
      } else if (jj_2_31(200)) {
        label_6:
        while (true) {
          op = jj_consume_token(PHRASE);
          if (jj_2_24(200)) {
            qiAND();
          } else if (jj_2_25(2)) {
            term();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case HIDE:
            case IF:
            case NOT:
            case LP:
              qeparen();
              break;
            default:
              jj_la1[9] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          if (jj_2_26(2)) {
            ;
          } else {
            break label_6;
          }
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
            jjtn000.operator = op.kind;
            if (op.kind == StrictParserConstants.NEARN) {
                jjtn000.value = op.image.substring(6, op.image.length() - 1);
            }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void qpAND() throws ParseException {
               /*@bgen(jjtree) qpAND */
               StrictASTqpAND jjtn000 = new StrictASTqpAND(this, JJTQPAND);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);Token op=null,val=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        op = jj_consume_token(AND);
        break;
      case SAND:
        op = jj_consume_token(SAND);
        break;
      case NEAR:
        op = jj_consume_token(NEAR);
        break;
      case NEARN:
        op = jj_consume_token(NEARN);
        break;
      case PAND:
        op = jj_consume_token(PAND);
        break;
      case PHRASE:
        op = jj_consume_token(PHRASE);
        break;
      case WITHIN:
        op = jj_consume_token(WITHIN);
        val = jj_consume_token(INTEGER);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_7:
      while (true) {
        if (jj_2_32(10)) {
          qeparen();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EXACT:
          case CASE:
          case HIDE:
          case MORPH:
          case STEM:
          case EXPAND:
          case IF:
          case NOT:
          case UNDEFINED:
          case INTEGER:
          case DECIMAL:
          case WORDSTRING:
            term();
            break;
          default:
            jj_la1[11] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        if (jj_2_33(10)) {
          ;
        } else {
          break label_7;
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
            jjtn000.operator = op.kind;
            if (op.kind == StrictParserConstants.NEARN) {
                jjtn000.value = op.image.substring(6, op.image.length() - 1);
            }
            if (op.kind == StrictParserConstants.WITHIN) {
                jjtn000.value = val.image;
            }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void qiOR() throws ParseException {
              /*@bgen(jjtree) qiOR */
              StrictASTqiOR jjtn000 = new StrictASTqiOR(this, JJTQIOR);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);Token op=null;
    try {
      if (jj_2_43(200)) {
        if (jj_2_34(200)) {
          qiAND();
        } else if (jj_2_35(200)) {
          qUND();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OR:
            op = jj_consume_token(OR);
            break;
          case SOR:
            op = jj_consume_token(SOR);
            break;
          case TOR:
            op = jj_consume_token(TOR);
            break;
          default:
            jj_la1[12] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          if (jj_2_36(12)) {
            qe();
          } else if (jj_2_37(12)) {
            term();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case HIDE:
            case IF:
            case NOT:
            case LP:
              qeparen();
              break;
            default:
              jj_la1[13] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          if (jj_2_38(8)) {
            ;
          } else {
            break label_8;
          }
        }
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
            jjtn000.operator = op.kind;
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXACT:
        case CASE:
        case HIDE:
        case MORPH:
        case STEM:
        case EXPAND:
        case IF:
        case NOT:
        case UNDEFINED:
        case LP:
        case INTEGER:
        case DECIMAL:
        case WORDSTRING:
          if (jj_2_39(2)) {
            term();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case HIDE:
            case IF:
            case NOT:
            case LP:
              qeparen();
              break;
            default:
              jj_la1[14] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          label_9:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case OR:
              op = jj_consume_token(OR);
              break;
            case SOR:
              op = jj_consume_token(SOR);
              break;
            case TOR:
              op = jj_consume_token(TOR);
              break;
            default:
              jj_la1[15] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            if (jj_2_40(12)) {
              qe();
            } else if (jj_2_41(12)) {
              term();
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case HIDE:
              case IF:
              case NOT:
              case LP:
                qeparen();
                break;
              default:
                jj_la1[16] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            if (jj_2_42(8)) {
              ;
            } else {
              break label_9;
            }
          }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
            jjtn000.operator = op.kind;
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void qpOR() throws ParseException {
              /*@bgen(jjtree) qpOR */
              StrictASTqpOR jjtn000 = new StrictASTqpOR(this, JJTQPOR);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);Token op=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        op = jj_consume_token(OR);
        break;
      case SOR:
        op = jj_consume_token(SOR);
        break;
      case TOR:
        op = jj_consume_token(TOR);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_10:
      while (true) {
        if (jj_2_44(10)) {
          qeparen();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EXACT:
          case CASE:
          case HIDE:
          case MORPH:
          case STEM:
          case EXPAND:
          case IF:
          case NOT:
          case UNDEFINED:
          case INTEGER:
          case DECIMAL:
          case WORDSTRING:
            term();
            break;
          default:
            jj_la1[19] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        if (jj_2_45(2)) {
          ;
        } else {
          break label_10;
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
            jjtn000.operator = op.kind;
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void qUND() throws ParseException {
              /*@bgen(jjtree) qUND */
  StrictASTqUND jjtn000 = new StrictASTqUND(this, JJTQUND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_46(2)) {
        term();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HIDE:
        case IF:
        case NOT:
        case LP:
          qeparen();
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_11:
      while (true) {
        if (jj_2_47(2)) {
          term();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HIDE:
          case IF:
          case NOT:
          case LP:
            qeparen();
            break;
          default:
            jj_la1[21] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        if (jj_2_48(200)) {
          ;
        } else {
          break label_11;
        }
      }
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
  }

  final public void qpPASS() throws ParseException {
                /*@bgen(jjtree) qpPASS */
                StrictASTqpPASS jjtn000 = new StrictASTqpPASS(this, JJTQPPASS);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token op=null;
    try {
      op = jj_consume_token(PASSAGE);
      label_12:
      while (true) {
        if (jj_2_49(10)) {
          qe();
        } else if (jj_2_50(10)) {
          term();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HIDE:
          case IF:
          case NOT:
          case LP:
            qeparen();
            break;
          default:
            jj_la1[22] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        if (jj_2_51(10)) {
          ;
        } else {
          break label_12;
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.operator = op.kind;
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
  }

  final public void term() throws ParseException {
              /*@bgen(jjtree) term */
              StrictASTterm jjtn000 = new StrictASTterm(this, JJTTERM);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);Token op=null, val=null, unary=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HIDE:
      case IF:
      case NOT:
      case UNDEFINED:
        if (jj_2_52(12)) {
          unary = jj_consume_token(NOT);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IF:
            unary = jj_consume_token(IF);
            break;
          case HIDE:
            unary = jj_consume_token(HIDE);
            break;
          case UNDEFINED:
            unary = jj_consume_token(UNDEFINED);
            break;
          default:
            jj_la1[23] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
         if (unary != null)
             jjtn000.unary = unary.kind;
      if (jj_2_53(12)) {
        qif();
      } else if (jj_2_54(12)) {
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EXACT:
          case CASE:
          case MORPH:
          case STEM:
          case EXPAND:
            ;
            break;
          default:
            jj_la1[25] = jj_gen;
            break label_13;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EXACT:
            op = jj_consume_token(EXACT);
            jjtn000.doExact = true;
            break;
          case MORPH:
            op = jj_consume_token(MORPH);
            jjtn000.doMorph = true;
            break;
          case STEM:
            op = jj_consume_token(STEM);
            jjtn000.doStem = true;
            break;
          case EXPAND:
            op = jj_consume_token(EXPAND);
            jjtn000.doExpand = true;
            break;
          case CASE:
            //op = <WORD>
                   //  {
                   //     jjtThis.doMorph = true;
                   //  }
                   //|
                   //op = <WILD>
                   //  {
                   //     jjtThis.doWild = true;
                   //  }
                   //|
                   op = jj_consume_token(CASE);
            jjtn000.matchCase = true;
            break;
          default:
            jj_la1[26] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WORDSTRING:
          val = jj_consume_token(WORDSTRING);
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
            if (!jjtn000.doExact && !jjtn000.doStem && !jjtn000.doExpand)
                jjtn000.doMorph = true;
            if (val != null)
                jjtn000.value = val.image;
          break;
        case DECIMAL:
          val = jj_consume_token(DECIMAL);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
            if (!jjtn000.doExact && !jjtn000.doStem && !jjtn000.doExpand)
                jjtn000.doMorph = true;
            if (val != null)
                jjtn000.value = val.image;
          break;
        case INTEGER:
          val = jj_consume_token(INTEGER);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
            if (!jjtn000.doExact && !jjtn000.doStem && !jjtn000.doExpand)
                jjtn000.doMorph = true;
            if (val != null)
                jjtn000.value = val.image;
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void qeparen() throws ParseException {
                 /*@bgen(jjtree) qeparen */
                 StrictASTqeparen jjtn000 = new StrictASTqeparen(this, JJTQEPAREN);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);Token op=null, val=null, unary=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HIDE:
      case IF:
      case NOT:
        if (jj_2_55(10)) {
          unary = jj_consume_token(NOT);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IF:
            unary = jj_consume_token(IF);
            break;
          case HIDE:
            unary = jj_consume_token(HIDE);
            break;
          default:
            jj_la1[28] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
         if (unary != null)
             jjtn000.unary = unary.kind;
      jj_consume_token(LP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEQUENCE:
      case WEIGHT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEQUENCE:
          op = jj_consume_token(SEQUENCE);
          break;
        case WEIGHT:
          op = jj_consume_token(WEIGHT);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DECIMAL:
            val = jj_consume_token(DECIMAL);
            break;
          case INTEGER:
            val = jj_consume_token(INTEGER);
            break;
          default:
            jj_la1[30] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      label_14:
      while (true) {
        if (jj_2_56(10)) {
          qe();
        } else if (jj_2_57(10)) {
          qp();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
        case PAND:
        case OR:
        case TOR:
        case SAND:
        case SOR:
        case PHRASE:
        case EXACT:
        case CASE:
        case HIDE:
        case MORPH:
        case STEM:
        case EXPAND:
        case PASSAGE:
        case IF:
        case NEAR:
        case NEARN:
        case NOT:
        case UNDEFINED:
        case WITHIN:
        case LP:
        case INTEGER:
        case DECIMAL:
        case WORDSTRING:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_14;
        }
      }
            if (op != null) {
                jjtn000.operator = op.kind;
                if (val != null) {
                    jjtn000.value = val.image;
                }
            }
      jj_consume_token(RP);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void qif() throws ParseException {
             /*@bgen(jjtree) qif */
  StrictASTqif jjtn000 = new StrictASTqif(this, JJTQIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      fieldname();
      if (jj_2_60(2)) {
        indexed_fieldoperator();
        if (jj_2_58(12)) {
          qeparen();
        } else if (jj_2_59(12)) {
          term();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else if (jj_2_61(2)) {
        saved_fieldoperator();
        saved_fieldvalue();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void fieldname() throws ParseException {
                   /*@bgen(jjtree) fieldname */
                   StrictASTfieldname jjtn000 = new StrictASTfieldname(this, JJTFIELDNAME);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token val=null;
    try {
      val = jj_consume_token(WORDSTRING);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
            jjtn000.value = val.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void indexed_fieldoperator() throws ParseException {
                               /*@bgen(jjtree) indexed_fieldoperator */
                               StrictASTindexed_fieldoperator jjtn000 = new StrictASTindexed_fieldoperator(this, JJTINDEXED_FIELDOPERATOR);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token op=null;
    try {
      op = jj_consume_token(CONTAINS);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
            jjtn000.operator = op.kind;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void saved_fieldoperator() throws ParseException {
                             /*@bgen(jjtree) saved_fieldoperator */
                             StrictASTsaved_fieldoperator jjtn000 = new StrictASTsaved_fieldoperator(this, JJTSAVED_FIELDOPERATOR);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token op=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STARTS:
        op = jj_consume_token(STARTS);
        break;
      case ENDS:
        op = jj_consume_token(ENDS);
        break;
      case MATCHES:
        op = jj_consume_token(MATCHES);
        break;
      case SUBSTRING:
        op = jj_consume_token(SUBSTRING);
        break;
      case LESS:
        op = jj_consume_token(LESS);
        break;
      case LT:
        op = jj_consume_token(LT);
        break;
      case EQUALS:
        op = jj_consume_token(EQUALS);
        break;
      case NOTEQUAL:
        op = jj_consume_token(NOTEQUAL);
        break;
      case GREATER:
        op = jj_consume_token(GREATER);
        break;
      case GT:
        op = jj_consume_token(GT);
        break;
      case LEQ:
        op = jj_consume_token(LEQ);
        break;
      case GEQ:
        op = jj_consume_token(GEQ);
        break;
      case SIMILAR:
        op = jj_consume_token(SIMILAR);
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
            jjtn000.operator = op.kind;
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void saved_fieldvalue() throws ParseException {
                          /*@bgen(jjtree) saved_fieldvalue */
                          StrictASTsaved_fieldvalue jjtn000 = new StrictASTsaved_fieldvalue(this, JJTSAVED_FIELDVALUE);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token val=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WORDSTRING:
        val = jj_consume_token(WORDSTRING);
        break;
      case DECIMAL:
        val = jj_consume_token(DECIMAL);
        break;
      case INTEGER:
        val = jj_consume_token(INTEGER);
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
            jjtn000.value = val.image;
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  final private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  final private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  final private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  final private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  final private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  final private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  final private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  final private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  final private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  final private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  final private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  final private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  final private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  final private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  final private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  final private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  final private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  final private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  final private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  final private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  final private boolean jj_3_34() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_3_57()) return true;
    }
    return false;
  }

  final private boolean jj_3_56() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(WEIGHT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) return true;
    }
    return false;
  }

  final private boolean jj_3_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) return true;
    }
    if (jj_3_38()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_38()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    return false;
  }

  final private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    return false;
  }

  final private boolean jj_3_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_scan_token(WITHIN)) return true;
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3_55() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) jj_scanpos = xsp;
    if (jj_scan_token(LP)) return true;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_48()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RP)) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
    }
    }
    }
    if (jj_3_33()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_scan_token(PHRASE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_scan_token(DECIMAL)) return true;
    return false;
  }

  final private boolean jj_3_31() {
    Token xsp;
    if (jj_3_26()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_scan_token(PAND)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_30() {
    Token xsp;
    if (jj_3_23()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_23()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_scan_token(NEARN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_29() {
    Token xsp;
    if (jj_3_20()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_scan_token(NEAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_scan_token(WORDSTRING)) return true;
    return false;
  }

  final private boolean jj_3_28() {
    Token xsp;
    if (jj_3_17()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(CASE)) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_27() {
    Token xsp;
    if (jj_3_14()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(EXPAND)) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(STEM)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3_47() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(MORPH)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(EXACT)) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3_54() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_36()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_53() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    return false;
  }

  final private boolean jj_3_44() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_52() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) return true;
    }
    return false;
  }

  final private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    return false;
  }

  final private boolean jj_3_50() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3_49() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_scan_token(PASSAGE)) return true;
    Token xsp;
    if (jj_3_51()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_51()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_59() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3_46() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3_58() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    if (jj_3_48()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_48()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) return true;
    }
    }
    if (jj_3_45()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_45()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_scan_token(CONTAINS)) return true;
    return false;
  }

  final private boolean jj_3_41() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3_61() {
    if (jj_3R_42()) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3_40() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_scan_token(WORDSTRING)) return true;
    return false;
  }

  final private boolean jj_3_60() {
    if (jj_3R_41()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_58()) {
    jj_scanpos = xsp;
    if (jj_3_59()) return true;
    }
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_39() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    if (jj_3_42()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_42()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_3R_49()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3_61()) return true;
    }
    return false;
  }

  final private boolean jj_3_37() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3_36() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_57() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_3R_21()) return true;
    return false;
  }

  public StrictParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[36];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x22000000,0x0,0x0,0x0,0x0,0x0,0xa6000000,0x0,0x58000000,0x0,0x0,0x58000000,0x0,0x0,0x58000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfe000000,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x108000,0x108000,0x6100af,0x0,0x6100af,0x40210004,0x40210004,0x40210004,0x40210004,0x8c0000,0x6100af,0x0,0x40210004,0x40210004,0x0,0x40210004,0x406100af,0x0,0x6100af,0x40210004,0x40210004,0x40210004,0x410004,0x610004,0xab,0xab,0x0,0x10004,0x210004,0x0,0x108000,0x108000,0x40ed20af,0x3f001f00,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x60,0x0,0x0,0xe0,0x0,0xe0,0x0,0x0,0x0,0x0,0x0,0xe0,0x0,0x0,0x0,0x0,0x0,0xe0,0x0,0xe0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe0,0x0,0x0,0x60,0x0,0x0,0xe0,0x3,0xe0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[61];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public StrictParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public StrictParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new StrictParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public StrictParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new StrictParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public StrictParser(StrictParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(StrictParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[92];
    for (int i = 0; i < 92; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 36; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 92; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 61; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

    }
