/* Generated By:JavaCC: Do not edit this line. JCCTokenizer.java */
package com.sun.labs.minion.document.tokenizer;

import java.util.regex.Pattern;
import java.util.logging.Level;
import com.sun.labs.util.props.ConfigString;
import com.sun.labs.util.props.PropertyException;
import com.sun.labs.util.props.PropertySheet;
import com.sun.labs.minion.pipeline.Stage;
import com.sun.labs.minion.util.CharArrayReader;

public class JCCTokenizer extends Tokenizer implements JCCTokenizerConstants {

    /**
     * A reusable reader for the characters that we'll be passed.
     */
    protected CharArrayReader reader;

    /**
     * A place to build up strings across tokens, if we need to.
     */
    protected StringBuilder buildUp;

    /**
     * Is the data that we've built up for an ngram tokenized language?
     */
    protected boolean isNgram;

    @ConfigString(defaultValue="")
    protected static String PROP_NO_BREAK_CHARS = "no_break_chars";

    /**
     * A regular expression pattern of characters for which we should not
     * break tokens.
     */
    protected Pattern noBreakChars;

    protected static String logTag = "JCCTOK";

    public JCCTokenizer() {
        this(null, false);
    }

    /**
     * Creates a JavaCC tokenizer that will not send punctuation to the downstream
     * stage.
     *
     * @param downstream the stage downstream of the tokenizer.
     */
    public JCCTokenizer(Stage downstream) {
        this(downstream, false);
    }

    /**
     * Creates a JavaCC tokenizer.
     * @param downstream the stage downstream of the tokenizer.
     * @param sendPunct if <code>true</code>, punctuation and whitespace will
     * be passed to the downstream stage.
     */
    public JCCTokenizer(Stage downstream, boolean sendPunct) {

        super(downstream, sendPunct);

        //
        // Stuff for this class.
        buildUp = new StringBuilder();
        reader = new CharArrayReader(new char[0], 0, 0);
        makeTokens = true;

        //
        // Set up the JavaCC stuff.  This is copied from the auto-generated stuff
        // because I want to use super above and because I need to create the
        // reader before I can hand it to these guys.
        jj_input_stream = new SimpleCharStream(reader, 1, 1);
        token_source = new JCCTokenizerTokenManager(jj_input_stream);
        token = new Token();
        token.next = jj_nt = token_source.getNextToken();
        jj_gen = 0;
        for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

    public void text(char[] text, int b, int e) {

        //
        // Handle the text as field data.
        handleFieldData(text, b, e);

        //
        // If we're not making tokens, just build up this text.
        if(!makeTokens) {
            buildUp.append(text, b, e - b);
            return;
        }

        //
        // We need to tokenize this stuff.  Set the text in our reader and 
        // re-initialize the lexer.
        reader.reset(text, b, e);
        ReInit(reader);
        try {
            while(next());
        } catch (ParseException pe) {
            logger.log(Level.WARNING, "Tokenizer parse exception", pe);
        }
    }

    public void handleLongChar(char c, int b, int l) {
        //
        // Tokenizing a single character is dumb, but we don't want to have to
        // recreate all of the rules!
        char[] temp = new char[1];
        temp[0] = c;
        reader.reset(temp, 0, 1);
        try {
            while(next());
        } catch (ParseException pe) {
            logger.log(Level.WARNING, "Tokenizer parse exception", pe);
        }
    }

    public Tokenizer getTokenizer(Stage s, boolean sp) {
        return new JCCTokenizer(s, sp);
    }

    public void flush() {
        send();
    }

    protected void sendToken(String t, int type) {
       downstream.token(new com.sun.labs.minion.pipeline.Token(t, wordNum++, type, 0, 0, 1));
    }

    /**
     * Sends the built up token, if there is one.
     */
    public void send() {
        if(buildUp.length() == 0) {
            return;
        }

        //
        // We have ngram data.  Send it as overlapping bigrams.
        if(isNgram) {
            if(buildUp.length() == 1) {
                sendToken(buildUp.toString(), com.sun.labs.minion.pipeline.Token.BIGRAM);
            } else {
                for(int i = 0; i < buildUp.length() - 1; i++) {
                    sendToken(buildUp.substring(i, i+2), com.sun.labs.minion.pipeline.Token.BIGRAM);
                }
                sendToken(buildUp.charAt(buildUp.length() - 1) + "\0", com.sun.labs.minion.pipeline.Token.BIGRAM);
            }
        } else {

            //
            // Regular data.  Just send it.
            sendToken(buildUp.toString(), com.sun.labs.minion.pipeline.Token.NORMAL);
        }

        //
        // Clean up for the next send.
        buildUp.delete(0, buildUp.length());
   }

   public void setNoBreakChars(String nbcPattern) {
        if(!nbcPattern.equals("")) {
            try {
                noBreakChars = Pattern.compile(nbcPattern);
            } catch (java.util.regex.PatternSyntaxException pse) {
                logger.log(Level.WARNING, "Error in noBreakChars pattern: " + nbcPattern,
                        pse);
                noBreakChars = null;
            }
        }
   }


    public void newProperties(PropertySheet ps) throws PropertyException {
        super.newProperties(ps);
        setNoBreakChars(ps.getString(PROP_NO_BREAK_CHARS));
    }

/**
 * End of autogenerated rules.  Have a nice day.
 */
  final public boolean next() throws ParseException {
  Token token = null;
    switch (jj_nt.kind) {
    case SPACESEPTOKEN:
      token = jj_consume_token(SPACESEPTOKEN);
      break;
    case NGRAMTOKEN:
      token = jj_consume_token(NGRAMTOKEN);
      break;
    case WHITESPACE:
      token = jj_consume_token(WHITESPACE);
      break;
    case PUNCTUATION:
      token = jj_consume_token(PUNCTUATION);
      break;
    case 0:
      token = jj_consume_token(0);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      switch(token.kind) {
         case EOF:
            //
            // This is the end of the reader.  If we're really at the end of the
            // file, flush() will call send().
            {if (true) return false;}
         case PUNCTUATION:
         case WHITESPACE:

            //
            // If we have a no breaking characters pattern, see if this token 
            // matches it.  If so, we'll collect the data and continue.
            if(noBreakChars != null &&
                noBreakChars.matcher(token.image).matches()) {
                buildUp.append(token.image);
                {if (true) return true;}
            }

            //
            // Send whatever's built up, since we're at a word boundary.
            send();

            //
            // If we're supposed to send punctuation, then send this token along
            // as well.  We don't care if punctuation gets broken up.
            if((token.kind == PUNCTUATION && sendPunct) ||
               (token.kind == WHITESPACE && sendWhite)) {
                downstream.punctuation(new com.sun.labs.minion.pipeline.Token(token.image,
                0, com.sun.labs.minion.pipeline.Token.PUNCT));
           }
            isNgram = false;
           {if (true) return true;}
         case NGRAMTOKEN:

            //
            // If we're not currently handling ngram tokenized data, we need to
            // send whatever we've built up and then set the ngram flag.
            if(!isNgram) {
                send();
            }

            //
            // Now we can start building up ngram tokenized data.
            isNgram = true;
            buildUp.append(token.image);
            {if (true) return true;}

         default:

            //
            // We're not in an ngram tokenized region.  If we have some built up
            // ngram stuff, we need to send it now.
            if(isNgram) {
                send();
            }

            // Add this to the string we're building.  If we hit some punctuation
            // or someone calls flush, we'll send the token.
            isNgram = false;
            buildUp.append(token.image);
            {if (true) return true;}
      }
    throw new Error("Missing return statement in function");
  }

  public JCCTokenizerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_gen;
  final private int[] jj_la1 = new int[1];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x1400b,};
   }

  public JCCTokenizer(java.io.InputStream stream) {
     this(stream, null);
  }
  public JCCTokenizer(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JCCTokenizerTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  public JCCTokenizer(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JCCTokenizerTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  public JCCTokenizer(JCCTokenizerTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  public void ReInit(JCCTokenizerTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    jj_nt = token;
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[17];
    for (int i = 0; i < 17; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 1; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 17; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
