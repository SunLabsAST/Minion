/* Generated By:JavaCC: Do not edit this line. JCCTokenizerTokenManager.java */
package com.sun.labs.minion.document.tokenizer;
import java.util.regex.Pattern;
import java.util.logging.Level;
import com.sun.labs.util.props.ConfigString;
import com.sun.labs.util.props.PropertyException;
import com.sun.labs.util.props.PropertySheet;
import com.sun.labs.minion.pipeline.Stage;
import com.sun.labs.minion.util.CharArrayReader;

public class JCCTokenizerTokenManager implements JCCTokenizerConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjMoveStringLiteralDfa0_0()
{
   return jjMoveNfa_0(3, 0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x100000000L, 0x0L
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x1L, 0x0L
};
static final long[] jjbitVec2 = {
   0x4000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec3 = {
   0x830000000fffL, 0x80000000L, 0x0L, 0x0L
};
static final long[] jjbitVec4 = {
   0x1L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec5 = {
   0xfffe000000025040L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3600000000ffffffL
};
static final long[] jjbitVec7 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec8 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec9 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L
};
static final long[] jjbitVec10 = {
   0x0L, 0x0L, 0xffffffff00000000L, 0xffffffffffffffffL
};
static final long[] jjbitVec11 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec12 = {
   0x0L, 0xffffffffffff0000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec13 = {
   0xffffffffffffffffL, 0xffff00000000ffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec14 = {
   0x0L, 0xffffffff00000000L, 0xffffffffffffffffL, 0xffffffffL
};
static final long[] jjbitVec15 = {
   0x200002L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec16 = {
   0x0L, 0x0L, 0x420040000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec17 = {
   0x7fffffffffffffL, 0xffffffffffff0000L, 0xffffffffffffffffL, 0x401f0003ffc3L
};
static final long[] jjbitVec18 = {
   0x0L, 0x400000000000000L, 0xfffffffbffffd740L, 0xfbfffffffff7fffL
};
static final long[] jjbitVec19 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffffc03L, 0x33fffffffff7fffL
};
static final long[] jjbitVec20 = {
   0xfffe00000000ffffL, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L
};
static final long[] jjbitVec21 = {
   0xfffffffd0000L, 0xe000L, 0x2003fffffffffL, 0x0L
};
static final long[] jjbitVec22 = {
   0x23fffffffffffff0L, 0xffc3ff010000L, 0x23c5fdfffff99fe0L, 0x3ffc3b0000000L
};
static final long[] jjbitVec23 = {
   0x36dfdfffff987e0L, 0x1cffc05e000000L, 0x23edfdfffffbbfe0L, 0xffc300010000L
};
static final long[] jjbitVec24 = {
   0x23edfdfffff99fe0L, 0x2ffc3b0000000L, 0x0L, 0x0L
};
static final long[] jjbitVec25 = {
   0x0L, 0x0L, 0x2ffbfffffc7fffe0L, 0x7fL
};
static final long[] jjbitVec26 = {
   0x6fbffffffffL, 0x3f03ffL, 0x0L, 0x0L
};
static final long[] jjbitVec27 = {
   0xffffffffffffff7fL, 0xffffffff3d7f3d7fL, 0x7f3d7fffffff3d7fL, 0xffff7fffff7f7f3dL
};
static final long[] jjbitVec28 = {
   0xffffffff7f3d7fffL, 0x3fe0007ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec29 = {
   0xffffffffffffffffL, 0x7f9fffffffffffL, 0xffffffff07fffffeL, 0x7ffffffffffL
};
static final long[] jjbitVec30 = {
   0x3ffff0003dfffL, 0x1dfff0003ffffL, 0xfffffffffffffL, 0x3ff10800000L
};
static final long[] jjbitVec31 = {
   0xffffffff03ff0000L, 0xffffffffffffffL, 0x1ffffffffffL, 0x0L
};
static final long[] jjbitVec32 = {
   0x1fffffffL, 0x1f3fffffffffc0L, 0x0L, 0x0L
};
static final long[] jjbitVec33 = {
   0xffffffffffffffffL, 0xfffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec34 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec35 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec36 = {
   0x0L, 0x8002000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec37 = {
   0xe3fbbd503e2ffc84L, 0x3e0L, 0x0L, 0x0L
};
static final long[] jjbitVec38 = {
   0x5f7ffdffa0f8007fL, 0xffdbL, 0x0L, 0x0L
};
static final long[] jjbitVec39 = {
   0x7fffffe03ff0000L, 0x7fffffeL, 0x0L, 0x0L
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 3)
                        kind = 3;
                     jjCheckNAdd(2);
                  }
                  else if (curChar == 32)
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAdd(0);
                  }
                  break;
               case 0:
                  if (curChar != 32)
                     break;
                  kind = 1;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 3;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 2:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  kind = 3;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAdd(0);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 14)
                        kind = 14;
                     jjCheckNAdd(1);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 3)
                        kind = 3;
                     jjCheckNAdd(2);
                  }
                  break;
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec1[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec4[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 11:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec14[i2] & l2) != 0L);
      default : 
         if ((jjbitVec5[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 25:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 29:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec39[i2] & l2) != 0L);
      default : 
         if ((jjbitVec15[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[3];
private final int[] jjstateSet = new int[6];
protected char curChar;
public JCCTokenizerTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public JCCTokenizerTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 3; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 16)
   {
      jjmatchedKind = 16;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
         matchedToken = jjFillToken();
         return matchedToken;
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
