/*
 * Copyright 2007-2008 Sun Microsystems, Inc. All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 * 
 * This code is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2
 * only, as published by the Free Software Foundation.
 * 
 * This code is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License version 2 for more details (a copy is
 * included in the LICENSE file that accompanied this code).
 * 
 * You should have received a copy of the GNU General Public License
 * version 2 along with this work; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 * 
 * Please contact Sun Microsystems, Inc., 16 Network Circle, Menlo
 * Park, CA 94025 or visit www.sun.com if you need additional
 * information or have any questions.
 */

package com.sun.labs.minion.indexer.postings;

/**
 * An interface for an iterator that can be used to step through the a
 * postings file entry.  Each class that implements <code>Entry</code> will
 * have to be able to generate an iterator that implements this interface.
 */
public interface PostingsIterator {

    /**
     * Gets the number of IDs that this iterator will produce.
     */
    public int getN();
    
    /**
     * Reads a number of IDs into the provided array.
     */
    public int get(int[] ids);
    
    /**
     * Reads a number of IDs and frequencies into the provided arrays.
     *
     * @param ids an array into which IDs will be placed.  If possible,
     * the array will be filled.
     * @param freq an array into which frequencies will be placed.  If 
     * possible, the array will be filled.
     * @return the number of ids and frequencies read into the array, which may
     * be smaller than the size of the array.
     */
    public int get(int[] ids, int[] freq);
    
    /**
     * Reads a number of IDs and the associated weights into the provided arrays.
      *
     * @param ids an array into which IDs will be placed.  If possible,
     * the array will be filled.
     * @param weights an array into which weights will be placed.  If 
     * possible, the array will be filled.
     * @return the number of ids and frequencies read into the array, which may
     * be smaller than the size of the array.
    */
    public int get(int[] ids, float[] weights);
    
    /**
     * Moves to the next document in this entry.  This method is different
     * than the <code>java.util.Iterator.next()</code> method in that it
     * does not return an object.  This would require too much object
     * creation overhead during retrieval, and saves the whole
     * <code>hasNext()</code>/<code>next()</code> function call overhead.
     * You should use the accessor functions for the iterator to find out
     * the actual document, position, etc. that the iterator is at.
     *
     * @return true if there is a next value, false otherwise.
     */
    public boolean next();

    /**
     * Finds the given document in the entry we're iterating through, if it
     * exists.  If the document occurs in this entry, the iterator is left
     * in a state where the data for that document has been decoded.  If
     * the document does not occur in this entry, the iterator is left in a
     * state where the data for the next-highest document sequence number
     * in this entry has been decoded.
     *
     * @param id The ID that we want to find.
     * @return true if the ID occurs in this entry, false otherwise.
     * @see #reset
     */
    public boolean findID(int id);

    /**
     * Resets the iterator to the beginning of the entry.  Data will not be
     * decoded until the <code>next</code> method is called.
     */
    public void reset();

    /**
     * Gets the document sequence number that the iterator is currently
     * pointing at.
     *
     * @return The document sequence number that the iterator is pointing
     * at, or 0 if the iterator has not been advanced yet, or has been
     * exhausted.
     */
    public int getID();

    /**
     * Gets the weight of the term in the current document, as generated by
     * some weighting function.
     */
    public float getWeight();

    /**
     * Gets the frequency of the term in the current document.
     */
    public int getFreq();
    
    /**
     * Compares this postings iterator to another one.  Typically this
     * comparison should be based on the ID at the head of the iterator.
     */
    public int compareTo(Object o);
    
    /**
     * Gets the features that were used to create this iterator.
     * 
     * @return the features used to create the iterator, or <code>null</code>
     * if no features were used.
     */
    public PostingsIteratorFeatures getFeatures();
    
} // PostingsIterator
